# src/components/backtest/component.yaml
name: backtest-strategy
description: >
  Ejecuta el backtest combinando las predicciones del LSTM y el filtro PPO.
  Sube los CSV de trades y un JSON con métricas a GCS.

inputs:
  - {name: lstm_model_dir,   type: String,  description: "gs://…/…/…/LSTM/<timestamp>"}
  - {name: rl_model_path,    type: String,  description: "gs://…/ppo_filter_model.zip"}
  - {name: features_path,    type: String,  description: "gs://…_unseen.parquet"}
  - {name: pair,             type: String}
  - {name: timeframe,        type: String}

outputs:
  - {name: output_gcs_dir,        type: String, description: "Carpeta GCS con CSV + metrics"}
  - {name: kfp_metrics_artifact,  type: String, description: "Ruta al JSON de métricas para Vertex UI"}

implementation:
  container:
    # === AJUSTE: Se revierte a la imagen estática original ===
    # La sobreescritura se hará en el script de la pipeline (main.py)
    image: europe-west1-docker.pkg.dev/trading-ai-460823/data-ingestion-repo/data-ingestion-agent:latest
    # =========================================================
    command:
      - python
      - -m
      - src.components.backtest.task
    args:
      - --lstm-model-dir
      - {inputValue: lstm_model_dir}
      - --rl-model-path
      - {inputValue: rl_model_path}
      - --features-path
      - {inputValue: features_path}
      - --pair
      - {inputValue: pair}
      - --timeframe
      - {inputValue: timeframe}
    fileOutputs:
      output_gcs_dir: /tmp/backtest_dir.txt
      kfp_metrics_artifact: /tmp/kfp_metrics.json